#include <Wire.h>
#include <MPU6050.h>
#include <Servo.h>

// MPU6050 setup
MPU6050 mpu;
float currentAngle = 0; // Track heading

// Define ESC and rudder servo
Servo esc;
Servo rudder;
const int escPin = 9;
const int rudderPin = 10;

// Boat movement states
enum State {LEG1, LEG2, LEG3, LEG4, LEG5};
State legState = LEG1;

// Boat kinematic values
const float speed = 1.0; // Speed in feet per second (adjustable as you measure)
const float leg1Distance = 40.0; // Distance for leg1 in feet
const float leg2Distance = 40.0 * sqrt(2); // Distance for leg2 (diagonal)
const float leg3Distance = 40.0;
const float leg4Distance = 40.0 * sqrt(2); // Distance for leg4 (diagonal)
const float leg5Distance = 40.0;

// Setup function
void setup() {
    Serial.begin(115200);
    Wire.begin();
    mpu.initialize();

    esc.attach(escPin);
    rudder.attach(rudderPin);

    // Initialize ESC (Assumes 1000-2000us PWM range)
    esc.writeMicroseconds(1000); // Stop motor
    delay(2000); // Allow ESC to initialize

    // Ensure MPU6050 is connected
    if (!mpu.testConnection()) {
        Serial.println("MPU6050 connection failed!");
        while (1);
    }
    Serial.println("MPU6050 connected.");

}

void loop() {
    switch (legState) {
        case LEG1:
            moveLeg(leg1Distance);
            break;
        case LEG2:
            moveLeg(leg2Distance);
            break;
        case LEG3:
            moveLeg(leg3Distance);
            break;
        case LEG4:
            moveLeg(leg4Distance);
            break;
        case LEG5:
            moveLeg(leg5Distance);
            break;
    }
}

// Motor control functions
void driveForward() {
    esc.writeMicroseconds(1500); // Adjust throttle for forward motion
}

void driveForwardSlow() {
    esc.writeMicroseconds(1200); // Adjust throttle for turning motion
}

void stopMotor() {
    esc.writeMicroseconds(1000); // Stop motor
}

void turnLeft() {
    // Get the initial angle from the gyro
    float initialAngle = getGyroAngle();
    float targetAngle = initialAngle + 45; // Target 45 degrees turn
    
    // Turn rudder left to start turning
    rudder.write(90 - 45); // Adjust rudder for left turn
    delay(100); // Small delay to ensure rudder starts moving

    // Keep motor running while turning
    driveForwardSlow();

    // Now wait until the boat has turned 45 degrees using the gyroscope
    while (getGyroAngle() < targetAngle) {
        delay(50); // Small delay for stability
    }

    stopMotor(); // Stop motor after the turn is completed
    rudder.write(90); // Reset rudder to neutral position
    Serial.println("Turn completed.");
}

// Read gyro angle to track boat's heading
float getGyroAngle() {
    int16_t ax, ay, az, gx, gy, gz;
    mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
    float angle = (gx / 131.0) * 0.01; // Convert gyro reading to degrees
    currentAngle += angle;
    return currentAngle;
}

// Move boat for a specified distance (in feet)
void moveLeg(float distance) {
    float timeToMove = distance / speed; // Calculate the time required to move the given distance (time = distance / speed)
    Serial.print("Moving for "); 
    Serial.print(timeToMove); 
    Serial.println(" seconds.");

    // Move forward for the required time
    driveForward();
    delay(timeToMove * 1000); // Convert time to milliseconds for delay
    stopMotor();

    // Turn left 45 degrees using the gyroscope
    turnLeft();

    // Update state to the next leg
    if (legState == LEG1) {
        legState = LEG2;
    } else if (legState == LEG2) {
        legState = LEG3;
    } else if (legState == LEG3) {
        legState = LEG4;
    } else if (legState == LEG4) {
        legState = LEG5;
    } else {
        legState = LEG1; // Reset to first leg if needed
        esc.writeMicroseconds(1000);
        Serial.println("Boat has completed the path!");
    }
}
