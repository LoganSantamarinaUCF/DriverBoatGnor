#include <Wire.h>
#include <Servo.h>
#include <MPU6050.h>

// Pin definitions
const int escPin = 9;          // ESC control pin
const int rudderPin = 10;      // Rudder servo control pin

// Constants for the boat's path (semi-circle)
const float R_X = 60.0;   // Semi-circle radius for x(t)
const float R_Y = 80.0;   // Semi-circle radius for y(t)

float tau = 0; // Time elapsed (you will increment this in your loop)
float T = 10;  // Desired travel time (in seconds for the boat to travel from (60,0) to (-60,0))
float t = 0;   // Parametric variable (time in radians)

// MPU6050 gyroscope object
MPU6050 mpu;

// Servo for the motor and rudder
Servo esc;
Servo rudderServo;

// Gyroscope variables
float yaw = 0;    // Boat's current heading (yaw angle)

// PID control variables for heading correction
float Kp = 1.0;  // Proportional gain for heading correction
float Ki = 0.0;  // Integral gain for heading correction (optional)
float Kd = 0.5;  // Derivative gain for heading correction (optional)

float previousError = 0;
float integral = 0;
float headingError = 0;
float headingCorrection = 0;

void setup() {
  // Start Serial for debugging
  Serial.begin(9600);

  // Initialize ESC and rudder servo
  esc.attach(escPin);
  rudderServo.attach(rudderPin);

  // Initialize MPU6050 (Gyroscope and Accelerometer)
  Wire.begin();
  mpu.initialize();
  if (!mpu.testConnection()) {
    Serial.println("MPU6050 connection failed");
    while (1);
  }

  // Start with motor at low speed
  esc.writeMicroseconds(1000); // Minimum motor speed
  rudderServo.write(90);       // Neutral rudder position
}

void loop() {
  // Update time-based parametric variable t
  t = (tau / T) * PI; // Calculate the current t based on time elapsed

  // Get velocity components (dx/dt, dy/dt) for the path
  float dx_dt = -R_X * sin(t);  // dx/dt = derivative of x(t)
  float dy_dt = R_Y * cos(t);   // dy/dt = derivative of y(t)

  // Calculate the magnitude of the velocity vector
  float velocity_magnitude = sqrt(dx_dt * dx_dt + dy_dt * dy_dt);

  // Map the velocity magnitude to the ESC motor speed
  int motorSpeed = map(velocity_magnitude * 1000, 0, 1000, 1000, 2000);

  // Calculate the desired heading angle (direction of the velocity vector)
  float angle = atan2(dy_dt, dx_dt);  // Angle of the velocity direction vector

  // Get the boat's current yaw from the MPU6050
  yaw = getYaw();

  // Correct the boat's heading with PID
  float rudderAngle = calculateHeadingCorrection(angle);

  // Set the motor speed and rudder position
  esc.writeMicroseconds(motorSpeed);  // Control motor speed
  rudderServo.write(rudderAngle);    // Control rudder

  // Increment the time variable tau (simulate time elapsed)
  tau += 0.1; // You can adjust this value to simulate different speeds or loop rates
  
  // Wait a short time before next iteration
  delay(100);  // Delay in milliseconds (controls the frequency of updates)
}

float getYaw() {
  mpu.getRotation(NULL, NULL, &yaw);  // Get yaw (z-axis rotation)
  return yaw / 131.0;  // Convert raw gyro data to degrees (depends on your MPU6050 scale)
}

float calculateHeadingCorrection(float desiredAngle) {
  // Calculate heading error (difference between desired and current yaw)
  headingError = desiredAngle - yaw;
  if (headingError > 180) headingError -= 360; // Normalize error to range [-180, 180]
  if (headingError < -180) headingError += 360;

  // Apply PID control to the heading error
  integral += headingError;
  float derivative = headingError - previousError;
  headingCorrection = Kp * headingError + Ki * integral + Kd * derivative;
  previousError = headingError;

  // Map the heading correction to the rudder angle range (0 to 180 degrees)
  int rudderAngle = 90 + headingCorrection; // 90 is neutral position
  rudderAngle = constrain(rudderAngle, 0, 180);  // Ensure rudder angle is within valid range

  return rudderAngle;
}
