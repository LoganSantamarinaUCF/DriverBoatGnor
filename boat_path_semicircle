#include <Wire.h>
#include <MPU6050.h>
#include <Servo.h>

MPU6050 mpu;
float currentAngle = 0; // Track heading

// Define ESC and rudder servo
Servo esc;
Servo rudder;
const int escPin = 9;
const int rudderPin = 10;

// State machine states
enum State {
    LEG1,
    LEG2,
    LEG3,
    LEG4,
    LEG5
};

State currentState = LEG1;

// Define the distance for each leg
float legDistances[5] = {40, 40 * sqrt(2), 40, 40 * sqrt(2), 40};
float speed = 1.0; // Speed in feet per second (adjust based on motor speed)

void setup() {
    Serial.begin(115200);
    Wire.begin();
    mpu.initialize();
    
    esc.attach(escPin);
    rudder.attach(rudderPin);
    
    // Initialize ESC (Assumes 1000-2000us PWM range)
    esc.writeMicroseconds(1000); // Stop motor
    delay(2000); // Allow ESC to initialize

    // Ensure MPU6050 is connected
    if (!mpu.testConnection()) {
        Serial.println("MPU6050 connection failed!");
        while (1);
    }
    Serial.println("MPU6050 connected.");
}

void loop() {
    switch (currentState) {
        case LEG1:
            travelLeg(40);  // Travel 40 feet for LEG1
            break;
        case LEG2:
            travelLeg(40 * sqrt(2));  // Travel sqrt(2) * 40 feet for LEG2
            break;
        case LEG3:
            travelLeg(40);  // Travel 40 feet for LEG3
            break;
        case LEG4:
            travelLeg(40 * sqrt(2));  // Travel sqrt(2) * 40 feet for LEG4
            break;
        case LEG5:
            travelLeg(40);  // Travel 40 feet for LEG5
            break;
    }
}

// Travel a specific leg distance and then turn 45 degrees
void travelLeg(float legDistance) {
    // Calculate time required to travel the leg distance (time = distance / speed)
    unsigned long travelTime = legDistance / speed * 1000;  // Convert to milliseconds
    
    // Move forward at the set speed for the leg
    driveForward();
    delay(travelTime);  // Move forward for the calculated time
    
    stopMotor();  // Stop the motor once the leg distance is traveled
    
    // Turn 45 degrees left
    turn45Degrees();
    
    // Move to the next state
    switch (currentState) {
        case LEG1:
            currentState = LEG2;
            break;
        case LEG2:
            currentState = LEG3;
            break;
        case LEG3:
            currentState = LEG4;
            break;
        case LEG4:
            currentState = LEG5;
            break;
        case LEG5:
            stopMotor(); // Final destination reached, stop the motor
            break;
    }
}

// Turn boat 45 degrees using MPU6050 and verify turn with gyro (LEFT TURN)
void turn45Degrees() {
    Serial.println("Turning 45 degrees left...");
    float initialAngle = getGyroAngle();  // Read the initial angle
    float targetAngle = initialAngle - 45;  // Set target angle (45 degrees left from current position)

    // Turn until the current angle reaches the target angle
    while (abs(getGyroAngle() - targetAngle) > 1) {  // 1 degree tolerance for more precision
        turnLeft();  // Turn left (counterclockwise)
        delay(50);  // Small delay to give time for the rudder to adjust
    }
    
    stopMotor();  // Stop motor once turn is complete
    Serial.println("Turn complete!");
}

// Read gyro angle
float getGyroAngle() {
    int16_t ax, ay, az, gx, gy, gz;
    mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
    float angle = (gx / 131.0) * 0.01; // Convert gyro reading to degrees
    currentAngle += angle;
    return currentAngle;
}

// Motor control functions
void driveForward() {
    esc.writeMicroseconds(1500); // Adjust throttle for forward motion
}

void turnLeft() {
    rudder.write(90 - 45); // Adjust rudder for left turn (counterclockwise)
    delay(1000); // Allow time for turn
    rudder.write(90); // Reset rudder to neutral position
}

void stopMotor() {
    esc.writeMicroseconds(1000); // Stop motor
}

